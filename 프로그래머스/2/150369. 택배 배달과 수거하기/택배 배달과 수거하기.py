def solution(cap, n, deliveries, pickups):
    """
    택배 배달과 수거를 효율적으로 처리하여 최소 이동 거리를 계산합니다.
    각 위치마다 배달할 상자 수(deliveries)와 수거할 상자 수(pickups)가 주어집니다.
    트럭의 용량(cap)과 전체 집의 수(n), 그리고 각 집의 배달/수거량을 입력받아
    모든 배달과 수거를 완료하는 데 필요한 총 이동 거리를 반환합니다.
    - cap: 트럭의 최대 용량
    - n: 집의 수
    - deliveries: 각 집에 배달할 상자 수 리스트
    - pickups: 각 집에서 수거할 상자 수 리스트
    """
    answer = 0  # 총 이동 거리를 누적합니다
    d = 0  # 현재까지 누적된 배달해야 할 총 상자 수
    p = 0  # 현재까지 누적된 수거해야 할 총 상자 수
    pos = n - 1  # 마지막 왕복 기준이 될 가장 먼 위치 인덱스
    # 가장 먼 위치부터 차례로 배달·수거량을 누적하며 처리 구간을 나눕니다
    for i in range(n - 1, -1, -1):
        # i번째 위치의 배달량과 수거량을 누적합니다
        d += deliveries[i]
        p += pickups[i]

        # 누적된 물량이 트럭 용량을 초과하면 한 번 왕복 처리
        while d > cap or p > cap:
            # 한 번 왕복으로 cap만큼 배달·수거 처리
            d -= cap
            p -= cap
            # 왕복 거리를 계산하여 누적
            answer += 2 * (pos + 1)
            # 다음 왕복 기준 위치를 현재 i로 갱신
            pos = i

    # 남은 물량이 있다면 마지막 왕복을 추가
    if d > 0 or p > 0:
        # 마지막 왕복 거리 누적
        answer += 2 * (pos + 1)

    return answer
